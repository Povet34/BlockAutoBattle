//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/TetrisInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TetrisInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TetrisInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TetrisInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""c4038b0b-2efd-4b5a-a8b7-8a5c273364ea"",
            ""actions"": [
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""d3b0e882-086a-4bf5-ac4d-fb87fff14de5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateXPositive"",
                    ""type"": ""Button"",
                    ""id"": ""c5f166b2-aedc-4581-a969-d7f165b9986a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateYPositive"",
                    ""type"": ""Button"",
                    ""id"": ""60c5e8d4-7228-4ec5-9ee4-00408e8199ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateZPositive"",
                    ""type"": ""Button"",
                    ""id"": ""0af3c050-f7fb-4128-b5dd-3413d5c0fea2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceBlock"",
                    ""type"": ""Button"",
                    ""id"": ""c8e91685-22b6-4599-8dca-62f798227574"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateXNegative"",
                    ""type"": ""Button"",
                    ""id"": ""6a008be4-6b19-43f7-81fb-6ffbb9a406fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateYNegative"",
                    ""type"": ""Button"",
                    ""id"": ""04d4e014-366e-443c-8f92-015e04194e8d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateZNegative"",
                    ""type"": ""Button"",
                    ""id"": ""bef73991-5e6b-44f1-999c-d20632513946"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d0e18ca5-f551-4df3-a086-a1108a39de4b"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dd68e5c-e49b-484b-9f61-ab77442fc2c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateXPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d81d816b-36e0-4bce-9502-94c983470008"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateYPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""135b4d1d-0e87-4e32-9dbc-888e94f694ec"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateZPositive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b107a2c4-a539-4d52-ab36-f32dda9bf594"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3f53523-30f5-4caa-af44-e1b65f37fc6a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateXNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39789123-bcb0-4557-872e-0ee77aaa47a5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateYNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a2909bb-1bb4-4176-906a-2f7daf13b08c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateZNegative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MouseMove = m_Gameplay.FindAction("MouseMove", throwIfNotFound: true);
        m_Gameplay_RotateXPositive = m_Gameplay.FindAction("RotateXPositive", throwIfNotFound: true);
        m_Gameplay_RotateYPositive = m_Gameplay.FindAction("RotateYPositive", throwIfNotFound: true);
        m_Gameplay_RotateZPositive = m_Gameplay.FindAction("RotateZPositive", throwIfNotFound: true);
        m_Gameplay_PlaceBlock = m_Gameplay.FindAction("PlaceBlock", throwIfNotFound: true);
        m_Gameplay_RotateXNegative = m_Gameplay.FindAction("RotateXNegative", throwIfNotFound: true);
        m_Gameplay_RotateYNegative = m_Gameplay.FindAction("RotateYNegative", throwIfNotFound: true);
        m_Gameplay_RotateZNegative = m_Gameplay.FindAction("RotateZNegative", throwIfNotFound: true);
    }

    ~@TetrisInputActions()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, TetrisInputActions.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_MouseMove;
    private readonly InputAction m_Gameplay_RotateXPositive;
    private readonly InputAction m_Gameplay_RotateYPositive;
    private readonly InputAction m_Gameplay_RotateZPositive;
    private readonly InputAction m_Gameplay_PlaceBlock;
    private readonly InputAction m_Gameplay_RotateXNegative;
    private readonly InputAction m_Gameplay_RotateYNegative;
    private readonly InputAction m_Gameplay_RotateZNegative;
    public struct GameplayActions
    {
        private @TetrisInputActions m_Wrapper;
        public GameplayActions(@TetrisInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMove => m_Wrapper.m_Gameplay_MouseMove;
        public InputAction @RotateXPositive => m_Wrapper.m_Gameplay_RotateXPositive;
        public InputAction @RotateYPositive => m_Wrapper.m_Gameplay_RotateYPositive;
        public InputAction @RotateZPositive => m_Wrapper.m_Gameplay_RotateZPositive;
        public InputAction @PlaceBlock => m_Wrapper.m_Gameplay_PlaceBlock;
        public InputAction @RotateXNegative => m_Wrapper.m_Gameplay_RotateXNegative;
        public InputAction @RotateYNegative => m_Wrapper.m_Gameplay_RotateYNegative;
        public InputAction @RotateZNegative => m_Wrapper.m_Gameplay_RotateZNegative;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
            @RotateXPositive.started += instance.OnRotateXPositive;
            @RotateXPositive.performed += instance.OnRotateXPositive;
            @RotateXPositive.canceled += instance.OnRotateXPositive;
            @RotateYPositive.started += instance.OnRotateYPositive;
            @RotateYPositive.performed += instance.OnRotateYPositive;
            @RotateYPositive.canceled += instance.OnRotateYPositive;
            @RotateZPositive.started += instance.OnRotateZPositive;
            @RotateZPositive.performed += instance.OnRotateZPositive;
            @RotateZPositive.canceled += instance.OnRotateZPositive;
            @PlaceBlock.started += instance.OnPlaceBlock;
            @PlaceBlock.performed += instance.OnPlaceBlock;
            @PlaceBlock.canceled += instance.OnPlaceBlock;
            @RotateXNegative.started += instance.OnRotateXNegative;
            @RotateXNegative.performed += instance.OnRotateXNegative;
            @RotateXNegative.canceled += instance.OnRotateXNegative;
            @RotateYNegative.started += instance.OnRotateYNegative;
            @RotateYNegative.performed += instance.OnRotateYNegative;
            @RotateYNegative.canceled += instance.OnRotateYNegative;
            @RotateZNegative.started += instance.OnRotateZNegative;
            @RotateZNegative.performed += instance.OnRotateZNegative;
            @RotateZNegative.canceled += instance.OnRotateZNegative;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
            @RotateXPositive.started -= instance.OnRotateXPositive;
            @RotateXPositive.performed -= instance.OnRotateXPositive;
            @RotateXPositive.canceled -= instance.OnRotateXPositive;
            @RotateYPositive.started -= instance.OnRotateYPositive;
            @RotateYPositive.performed -= instance.OnRotateYPositive;
            @RotateYPositive.canceled -= instance.OnRotateYPositive;
            @RotateZPositive.started -= instance.OnRotateZPositive;
            @RotateZPositive.performed -= instance.OnRotateZPositive;
            @RotateZPositive.canceled -= instance.OnRotateZPositive;
            @PlaceBlock.started -= instance.OnPlaceBlock;
            @PlaceBlock.performed -= instance.OnPlaceBlock;
            @PlaceBlock.canceled -= instance.OnPlaceBlock;
            @RotateXNegative.started -= instance.OnRotateXNegative;
            @RotateXNegative.performed -= instance.OnRotateXNegative;
            @RotateXNegative.canceled -= instance.OnRotateXNegative;
            @RotateYNegative.started -= instance.OnRotateYNegative;
            @RotateYNegative.performed -= instance.OnRotateYNegative;
            @RotateYNegative.canceled -= instance.OnRotateYNegative;
            @RotateZNegative.started -= instance.OnRotateZNegative;
            @RotateZNegative.performed -= instance.OnRotateZNegative;
            @RotateZNegative.canceled -= instance.OnRotateZNegative;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMouseMove(InputAction.CallbackContext context);
        void OnRotateXPositive(InputAction.CallbackContext context);
        void OnRotateYPositive(InputAction.CallbackContext context);
        void OnRotateZPositive(InputAction.CallbackContext context);
        void OnPlaceBlock(InputAction.CallbackContext context);
        void OnRotateXNegative(InputAction.CallbackContext context);
        void OnRotateYNegative(InputAction.CallbackContext context);
        void OnRotateZNegative(InputAction.CallbackContext context);
    }
}
